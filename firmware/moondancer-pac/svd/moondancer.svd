<?xml version="1.0" encoding="utf-8"?>
<device xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" schemaVersion="1.1" xs:noNamespaceSchemaLocation="CMSIS-SVD.xsd">
  <vendor>luna-soc</vendor>
  <name>SOC</name>
  <description>TODO device.description</description>
  <addressUnitBits>8</addressUnitBits>
  <width>32</width>
  <size>32</size>
  <access>read-write</access>
  <resetValue>0x00000000</resetValue>
  <resetMask>0xFFFFFFFF</resetMask>
  <peripherals>
    <peripheral>
      <name>leds</name>
      <groupName/>
      <baseAddress>0xf0000000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x06</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>Mode</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_1</name>
              <description>pin_1 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_2</name>
              <description>pin_2 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_3</name>
              <description>pin_3 field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_4</name>
              <description>pin_4 field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_5</name>
              <description>pin_5 field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>Input</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_1</name>
              <description>pin_1 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_2</name>
              <description>pin_2 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_3</name>
              <description>pin_3 field</description>
              <bitOffset>3</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_4</name>
              <description>pin_4 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_5</name>
              <description>pin_5 field</description>
              <bitOffset>5</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>Output</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0003</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_1</name>
              <description>pin_1 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_2</name>
              <description>pin_2 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_3</name>
              <description>pin_3 field</description>
              <bitOffset>3</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_4</name>
              <description>pin_4 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_5</name>
              <description>pin_5 field</description>
              <bitOffset>5</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SetClr</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0_set</name>
              <description>pin_0_set field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_0_clr</name>
              <description>pin_0_clr field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_1_set</name>
              <description>pin_1_set field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_1_clr</name>
              <description>pin_1_clr field</description>
              <bitOffset>3</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_2_set</name>
              <description>pin_2_set field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_2_clr</name>
              <description>pin_2_clr field</description>
              <bitOffset>5</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_3_set</name>
              <description>pin_3_set field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_3_clr</name>
              <description>pin_3_clr field</description>
              <bitOffset>7</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_4_set</name>
              <description>pin_4_set field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_4_clr</name>
              <description>pin_4_clr field</description>
              <bitOffset>9</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_5_set</name>
              <description>pin_5_set field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_5_clr</name>
              <description>pin_5_clr field</description>
              <bitOffset>11</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>gpio0</name>
      <groupName/>
      <baseAddress>0xf0000100</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x06</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>Mode</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_1</name>
              <description>pin_1 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_2</name>
              <description>pin_2 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_3</name>
              <description>pin_3 field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_4</name>
              <description>pin_4 field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_5</name>
              <description>pin_5 field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_6</name>
              <description>pin_6 field</description>
              <bitOffset>12</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_7</name>
              <description>pin_7 field</description>
              <bitOffset>14</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>Input</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_1</name>
              <description>pin_1 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_2</name>
              <description>pin_2 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_3</name>
              <description>pin_3 field</description>
              <bitOffset>3</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_4</name>
              <description>pin_4 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_5</name>
              <description>pin_5 field</description>
              <bitOffset>5</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_6</name>
              <description>pin_6 field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_7</name>
              <description>pin_7 field</description>
              <bitOffset>7</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>Output</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0003</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_1</name>
              <description>pin_1 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_2</name>
              <description>pin_2 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_3</name>
              <description>pin_3 field</description>
              <bitOffset>3</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_4</name>
              <description>pin_4 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_5</name>
              <description>pin_5 field</description>
              <bitOffset>5</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_6</name>
              <description>pin_6 field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_7</name>
              <description>pin_7 field</description>
              <bitOffset>7</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SetClr</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0_set</name>
              <description>pin_0_set field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_0_clr</name>
              <description>pin_0_clr field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_1_set</name>
              <description>pin_1_set field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_1_clr</name>
              <description>pin_1_clr field</description>
              <bitOffset>3</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_2_set</name>
              <description>pin_2_set field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_2_clr</name>
              <description>pin_2_clr field</description>
              <bitOffset>5</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_3_set</name>
              <description>pin_3_set field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_3_clr</name>
              <description>pin_3_clr field</description>
              <bitOffset>7</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_4_set</name>
              <description>pin_4_set field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_4_clr</name>
              <description>pin_4_clr field</description>
              <bitOffset>9</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_5_set</name>
              <description>pin_5_set field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_5_clr</name>
              <description>pin_5_clr field</description>
              <bitOffset>11</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_6_set</name>
              <description>pin_6_set field</description>
              <bitOffset>12</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_6_clr</name>
              <description>pin_6_clr field</description>
              <bitOffset>13</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[13:13]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_7_set</name>
              <description>pin_7_set field</description>
              <bitOffset>14</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[14:14]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_7_clr</name>
              <description>pin_7_clr field</description>
              <bitOffset>15</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>gpio1</name>
      <groupName/>
      <baseAddress>0xf0000200</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x06</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>Mode</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_1</name>
              <description>pin_1 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_2</name>
              <description>pin_2 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_3</name>
              <description>pin_3 field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_4</name>
              <description>pin_4 field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_5</name>
              <description>pin_5 field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_6</name>
              <description>pin_6 field</description>
              <bitOffset>12</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_7</name>
              <description>pin_7 field</description>
              <bitOffset>14</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>Input</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_1</name>
              <description>pin_1 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_2</name>
              <description>pin_2 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_3</name>
              <description>pin_3 field</description>
              <bitOffset>3</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_4</name>
              <description>pin_4 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_5</name>
              <description>pin_5 field</description>
              <bitOffset>5</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_6</name>
              <description>pin_6 field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pin_7</name>
              <description>pin_7 field</description>
              <bitOffset>7</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>Output</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0003</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_1</name>
              <description>pin_1 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_2</name>
              <description>pin_2 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_3</name>
              <description>pin_3 field</description>
              <bitOffset>3</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_4</name>
              <description>pin_4 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_5</name>
              <description>pin_5 field</description>
              <bitOffset>5</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_6</name>
              <description>pin_6 field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pin_7</name>
              <description>pin_7 field</description>
              <bitOffset>7</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SetClr</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0_set</name>
              <description>pin_0_set field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_0_clr</name>
              <description>pin_0_clr field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_1_set</name>
              <description>pin_1_set field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_1_clr</name>
              <description>pin_1_clr field</description>
              <bitOffset>3</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_2_set</name>
              <description>pin_2_set field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_2_clr</name>
              <description>pin_2_clr field</description>
              <bitOffset>5</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_3_set</name>
              <description>pin_3_set field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_3_clr</name>
              <description>pin_3_clr field</description>
              <bitOffset>7</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_4_set</name>
              <description>pin_4_set field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_4_clr</name>
              <description>pin_4_clr field</description>
              <bitOffset>9</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_5_set</name>
              <description>pin_5_set field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_5_clr</name>
              <description>pin_5_clr field</description>
              <bitOffset>11</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_6_set</name>
              <description>pin_6_set field</description>
              <bitOffset>12</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_6_clr</name>
              <description>pin_6_clr field</description>
              <bitOffset>13</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[13:13]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_7_set</name>
              <description>pin_7_set field</description>
              <bitOffset>14</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[14:14]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_7_clr</name>
              <description>pin_7_clr field</description>
              <bitOffset>15</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>uart0</name>
      <groupName/>
      <baseAddress>0xf0000300</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x14</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>tx_data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>data</name>
              <description>data field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>data</name>
              <description>data field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_ready</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>txe</name>
              <description>txe field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_avail</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x000c</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>rxe</name>
              <description>rxe field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>divisor</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0010</addressOffset>
          <size>32</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>div</name>
              <description>div field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>24</bitWidth>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>uart1</name>
      <groupName/>
      <baseAddress>0xf0000400</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x14</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>tx_data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>data</name>
              <description>data field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>data</name>
              <description>data field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>tx_ready</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>txe</name>
              <description>txe field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>rx_avail</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x000c</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>rxe</name>
              <description>rxe field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>divisor</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0010</addressOffset>
          <size>32</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>div</name>
              <description>div field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>24</bitWidth>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>timer0</name>
      <groupName/>
      <baseAddress>0xf0000500</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x12</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>timer0</name>
        <value>0</value>
      </interrupt>
      <registers>
        <register>
          <name>enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>enable</name>
              <description>enable field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mode</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0001</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>periodic</name>
              <description>periodic field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reload</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>32</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>value</name>
              <description>value field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>32</bitWidth>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>counter</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>32</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>value</name>
              <description>value field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>32</bitWidth>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0010</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0011</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>timer1</name>
      <groupName/>
      <baseAddress>0xf0000600</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x12</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>timer1</name>
        <value>1</value>
      </interrupt>
      <registers>
        <register>
          <name>enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>enable</name>
              <description>enable field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>mode</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0001</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>periodic</name>
              <description>periodic field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reload</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>32</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>value</name>
              <description>value field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>32</bitWidth>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>counter</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>32</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>value</name>
              <description>value field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>32</bitWidth>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0010</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0011</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>spi0</name>
      <groupName/>
      <baseAddress>0xf0000700</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x10</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>phy</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>32</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>length</name>
              <description>length field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>6</bitWidth>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>width</name>
              <description>width field</description>
              <bitOffset>6</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[9:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[17:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>cs</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>select</name>
              <description>select field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0005</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>rx_ready</name>
              <description>rx_ready field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx_ready</name>
              <description>tx_ready field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>64</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>rx</name>
              <description>rx field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>32</bitWidth>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>tx</name>
              <description>tx field</description>
              <bitOffset>32</bitOffset>
              <bitWidth>32</bitWidth>
              <bitRange>[63:32]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb0</name>
      <groupName/>
      <baseAddress>0xf0000800</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x0a</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb0</name>
        <value>2</value>
      </interrupt>
      <registers>
        <register>
          <name>control</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>connect</name>
              <description>connect field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>low_speed_only</name>
              <description>low_speed_only field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>full_speed_only</name>
              <description>full_speed_only field</description>
              <bitOffset>9</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>6</bitWidth>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>speed</name>
              <description>speed field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>6</bitWidth>
              <bitRange>[7:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0009</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb0_ep_control</name>
      <groupName/>
      <baseAddress>0xf0000900</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x12</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb0_ep_control</name>
        <value>3</value>
      </interrupt>
      <registers>
        <register>
          <name>control</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>address</name>
              <description>address field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>address</name>
              <description>address field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>epno</name>
              <description>epno field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[11:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>have</name>
              <description>have field</description>
              <bitOffset>12</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>13</bitOffset>
              <bitWidth>3</bitWidth>
              <bitRange>[15:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reset</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>fifo</name>
              <description>fifo field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0005</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>byte</name>
              <description>byte field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0010</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0011</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb0_ep_in</name>
      <groupName/>
      <baseAddress>0xf0000a00</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x12</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb0_ep_in</name>
        <value>4</value>
      </interrupt>
      <registers>
        <register>
          <name>endpoint</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>number</name>
              <description>number field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[3:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stall</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0001</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>stalled</name>
              <description>stalled field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pid</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>toggle</name>
              <description>toggle field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>32</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>nak</name>
              <description>nak field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>16</bitWidth>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>epno</name>
              <description>epno field</description>
              <bitOffset>16</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[19:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>20</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>idle</name>
              <description>idle field</description>
              <bitOffset>24</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>have</name>
              <description>have field</description>
              <bitOffset>25</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pid</name>
              <description>pid field</description>
              <bitOffset>26</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>27</bitOffset>
              <bitWidth>5</bitWidth>
              <bitRange>[31:27]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reset</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>fifo</name>
              <description>fifo field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0009</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>byte</name>
              <description>byte field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0010</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0011</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb0_ep_out</name>
      <groupName/>
      <baseAddress>0xf0000b00</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x22</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb0_ep_out</name>
        <value>5</value>
      </interrupt>
      <registers>
        <register>
          <name>control</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>address</name>
              <description>address field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>endpoint</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0001</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>number</name>
              <description>number field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>enabled</name>
              <description>enabled field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>prime</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0003</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>primed</name>
              <description>primed field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stall</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>stalled</name>
              <description>stalled field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pid</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0005</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>toggle</name>
              <description>toggle field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0006</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>epno</name>
              <description>epno field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>have</name>
              <description>have field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pid</name>
              <description>pid field</description>
              <bitOffset>9</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>6</bitWidth>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reset</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>fifo</name>
              <description>fifo field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0009</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>byte</name>
              <description>byte field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0020</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0021</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb1</name>
      <groupName/>
      <baseAddress>0xf0000c00</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x0a</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb1</name>
        <value>6</value>
      </interrupt>
      <registers>
        <register>
          <name>control</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>connect</name>
              <description>connect field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>low_speed_only</name>
              <description>low_speed_only field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>full_speed_only</name>
              <description>full_speed_only field</description>
              <bitOffset>9</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>6</bitWidth>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>speed</name>
              <description>speed field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>6</bitWidth>
              <bitRange>[7:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0009</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb1_ep_control</name>
      <groupName/>
      <baseAddress>0xf0000d00</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x12</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb1_ep_control</name>
        <value>7</value>
      </interrupt>
      <registers>
        <register>
          <name>control</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>address</name>
              <description>address field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>address</name>
              <description>address field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>epno</name>
              <description>epno field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[11:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>have</name>
              <description>have field</description>
              <bitOffset>12</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>13</bitOffset>
              <bitWidth>3</bitWidth>
              <bitRange>[15:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reset</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>fifo</name>
              <description>fifo field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0005</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>byte</name>
              <description>byte field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0010</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0011</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb1_ep_in</name>
      <groupName/>
      <baseAddress>0xf0000e00</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x12</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb1_ep_in</name>
        <value>8</value>
      </interrupt>
      <registers>
        <register>
          <name>endpoint</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>number</name>
              <description>number field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[3:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stall</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0001</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>stalled</name>
              <description>stalled field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pid</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>toggle</name>
              <description>toggle field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>32</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>nak</name>
              <description>nak field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>16</bitWidth>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>epno</name>
              <description>epno field</description>
              <bitOffset>16</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[19:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>20</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>idle</name>
              <description>idle field</description>
              <bitOffset>24</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>have</name>
              <description>have field</description>
              <bitOffset>25</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pid</name>
              <description>pid field</description>
              <bitOffset>26</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>27</bitOffset>
              <bitWidth>5</bitWidth>
              <bitRange>[31:27]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reset</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>fifo</name>
              <description>fifo field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0009</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>byte</name>
              <description>byte field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0010</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0011</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb1_ep_out</name>
      <groupName/>
      <baseAddress>0xf0000f00</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x22</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb1_ep_out</name>
        <value>9</value>
      </interrupt>
      <registers>
        <register>
          <name>control</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>address</name>
              <description>address field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>endpoint</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0001</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>number</name>
              <description>number field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>enabled</name>
              <description>enabled field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>prime</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0003</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>primed</name>
              <description>primed field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stall</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>stalled</name>
              <description>stalled field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pid</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0005</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>toggle</name>
              <description>toggle field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0006</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>epno</name>
              <description>epno field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>have</name>
              <description>have field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pid</name>
              <description>pid field</description>
              <bitOffset>9</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>6</bitWidth>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reset</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>fifo</name>
              <description>fifo field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0009</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>byte</name>
              <description>byte field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0020</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0021</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb2</name>
      <groupName/>
      <baseAddress>0xf0001000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x0a</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb2</name>
        <value>10</value>
      </interrupt>
      <registers>
        <register>
          <name>control</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>connect</name>
              <description>connect field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>low_speed_only</name>
              <description>low_speed_only field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>full_speed_only</name>
              <description>full_speed_only field</description>
              <bitOffset>9</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>6</bitWidth>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>speed</name>
              <description>speed field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>2</bitOffset>
              <bitWidth>6</bitWidth>
              <bitRange>[7:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0009</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb2_ep_control</name>
      <groupName/>
      <baseAddress>0xf0001100</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x12</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb2_ep_control</name>
        <value>11</value>
      </interrupt>
      <registers>
        <register>
          <name>control</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>address</name>
              <description>address field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>address</name>
              <description>address field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>epno</name>
              <description>epno field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[11:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>have</name>
              <description>have field</description>
              <bitOffset>12</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>13</bitOffset>
              <bitWidth>3</bitWidth>
              <bitRange>[15:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reset</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>fifo</name>
              <description>fifo field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0005</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>byte</name>
              <description>byte field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0010</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0011</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb2_ep_in</name>
      <groupName/>
      <baseAddress>0xf0001200</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x12</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb2_ep_in</name>
        <value>12</value>
      </interrupt>
      <registers>
        <register>
          <name>endpoint</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>number</name>
              <description>number field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[3:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stall</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0001</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>stalled</name>
              <description>stalled field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pid</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>toggle</name>
              <description>toggle field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>32</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>nak</name>
              <description>nak field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>16</bitWidth>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>epno</name>
              <description>epno field</description>
              <bitOffset>16</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[19:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>20</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>idle</name>
              <description>idle field</description>
              <bitOffset>24</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>have</name>
              <description>have field</description>
              <bitOffset>25</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pid</name>
              <description>pid field</description>
              <bitOffset>26</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>27</bitOffset>
              <bitWidth>5</bitWidth>
              <bitRange>[31:27]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reset</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>fifo</name>
              <description>fifo field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0009</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>byte</name>
              <description>byte field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0010</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0011</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>usb2_ep_out</name>
      <groupName/>
      <baseAddress>0xf0001300</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x22</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>usb2_ep_out</name>
        <value>13</value>
      </interrupt>
      <registers>
        <register>
          <name>control</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>address</name>
              <description>address field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>endpoint</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0001</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>number</name>
              <description>number field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>enabled</name>
              <description>enabled field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>prime</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0003</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>primed</name>
              <description>primed field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>stall</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0004</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>stalled</name>
              <description>stalled field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>pid</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0005</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>toggle</name>
              <description>toggle field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>status</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0006</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>epno</name>
              <description>epno field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>4</bitOffset>
              <bitWidth>4</bitWidth>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>have</name>
              <description>have field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pid</name>
              <description>pid field</description>
              <bitOffset>9</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>_1</name>
              <description>_1 field</description>
              <bitOffset>10</bitOffset>
              <bitWidth>6</bitWidth>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>reset</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0008</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>fifo</name>
              <description>fifo field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>_0</name>
              <description>_0 field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>7</bitWidth>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0009</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>byte</name>
              <description>byte field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_enable</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0020</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ev_pending</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0021</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>mask</name>
              <description>mask field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>advertiser</name>
      <groupName/>
      <baseAddress>0xf0001400</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x01</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>control</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>enable</name>
              <description>enable field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>info</name>
      <groupName/>
      <baseAddress>0xf0001500</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x02</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>version</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>16</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>major</name>
              <description>major field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>minor</name>
              <description>minor field</description>
              <bitOffset>8</bitOffset>
              <bitWidth>8</bitWidth>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>user0</name>
      <groupName/>
      <baseAddress>0xf0001600</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x04</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>Mode</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0000</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>2</bitWidth>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>Input</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0001</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>Output</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0002</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0</name>
              <description>pin_0 field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SetClr</name>
          <description>
    A CSR register.

    Parameters
    ----------
    fields : :class:`dict` or :class:`list` or :class:`Field`
        Collection of register fields. If ``None`` (default), a dict is populated from Python
        :term:`variable annotations &lt;python:variable annotations&gt;`. ``fields`` is used to create
        a :class:`FieldActionMap`, :class:`FieldActionArray`, or :class:`FieldAction`,
        depending on its type (dict, list, or Field).
    

    Interface attributes
    --------------------
    element : :class:`Element`
        Interface between this register and a CSR bus primitive.

    Attributes
    ----------
    field : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Collection of field instances.
    f : :class:`FieldActionMap` or :class:`FieldActionArray` or :class:`FieldAction`
        Shorthand for :attr:`Register.field`.

    Raises
    ------
    :exc:`TypeError`
        If ``fields`` is neither ``None``, a :class:`dict`, a :class:`list`, or a :class:`Field`.
    :exc:`ValueError`
        If ``fields`` is not ``None`` and at least one variable annotation is a :class:`Field`.
    :exc:`ValueError`
        If ``element.access`` is not readable and at least one field is readable.
    :exc:`ValueError`
        If ``element.access`` is not writable and at least one field is writable.
    </description>
          <addressOffset>0x0003</addressOffset>
          <size>8</size>
          <resetValue>0x00</resetValue>
          <access>read-write</access>
          <fields>
            <field>
              <name>pin_0_set</name>
              <description>pin_0_set field</description>
              <bitOffset>0</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>pin_0_clr</name>
              <description>pin_0_clr field</description>
              <bitOffset>1</bitOffset>
              <bitWidth>1</bitWidth>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
  </peripherals>
</device>
